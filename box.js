// Generated by CoffeeScript 1.7.1
(function() {
  var Box, closestMultipleTo, css, getPrefixedStyle, querySelectorAll, root,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  closestMultipleTo = function(num, mult) {
    return Math.round(num / mult) * mult;
  };

  getPrefixedStyle = (function() {
    var d;
    d = document.createElement("div");
    return function(style) {
      var capStyle, moz, ms, o, webkit;
      capStyle = style.charAt(0).toUpperCase() + style.slice(1);
      webkit = "webkit" + capStyle;
      moz = "Moz" + capStyle;
      ms = "ms" + capStyle;
      o = "o" + capStyle;
      if (d.style[webkit] != null) {
        return webkit;
      } else if (d.style[moz] != null) {
        return moz;
      } else if (d.style[ms] != null) {
        return ms;
      } else if (d.style[o] != null) {
        return o;
      } else {
        return style;
      }
    };
  })();

  css = function(node, obj) {
    var key, val, _results;
    if (typeof obj === "string") {
      return node.style[getPrefixedStyle(obj)];
    } else {
      _results = [];
      for (key in obj) {
        val = obj[key];
        _results.push(node.style[getPrefixedStyle(key)] = val);
      }
      return _results;
    }
  };

  querySelectorAll = function() {
    var el, selector;
    if (arguments[0] instanceof Node) {
      el = arguments[0];
      selector = arguments[1];
    } else {
      el = document;
      selector = arguments[0];
    }
    return Array.prototype.slice.call(el.querySelectorAll(selector));
  };

  Box = (function() {
    function Box(container, opts) {
      this.onFront = __bind(this.onFront, this);
      this.onBack = __bind(this.onBack, this);
      this.showFront = __bind(this.showFront, this);
      this.showBack = __bind(this.showBack, this);
      this.flip = __bind(this.flip, this);
      this.turn = __bind(this.turn, this);
      this.setBoxTransform = __bind(this.setBoxTransform, this);
      this.setSize = __bind(this.setSize, this);
      var _ref, _ref1, _ref2;
      this.width = opts.width, this.height = opts.height, this.depth = opts.depth;
      this.container = document.querySelector(container);
      css(this.container, {
        perspective: opts.perspective || 1000,
        position: "relative"
      });
      this.box = this.container.querySelector(".box");
      css(this.box, {
        width: "100%",
        height: "100%",
        transformStyle: "preserve-3d"
      });
      querySelectorAll(this.box, ".face").forEach(function(node) {
        return css(node, {
          position: "absolute",
          outline: "1px solid transparent"
        });
      });
      this.faces = {
        front: this.container.querySelector(".front"),
        rear: this.container.querySelector(".rear"),
        left: this.container.querySelector(".left"),
        right: this.container.querySelector(".right"),
        top: this.container.querySelector(".top"),
        bottom: this.container.querySelector(".bottom")
      };
      this.rotation = {
        x: ((_ref = opts.rotation) != null ? _ref.x : void 0) || 0,
        y: ((_ref1 = opts.rotation) != null ? _ref1.y : void 0) || 0,
        z: ((_ref2 = opts.rotation) != null ? _ref2.z : void 0) || 0
      };
      this.setSize();
      this.setBoxTransform();
    }

    Box.prototype.perspective = function(set) {
      if (set) {
        return css(this.container({
          perspective: set
        }));
      } else {
        return css(this.container("perspective"));
      }
    };

    Box.prototype.setSize = function(opts) {
      var el, face, _ref;
      if (opts) {
        this.width = opts.width, this.height = opts.height, this.depth = opts.depth;
      }
      css(this.container, {
        height: this.height + "px",
        width: this.width + "px"
      });
      _ref = this.faces;
      for (face in _ref) {
        el = _ref[face];
        switch (face) {
          case "front":
          case "rear":
            css(el, {
              height: this.height + "px",
              width: this.width + "px"
            });
            break;
          case "right":
          case "left":
            css(el, {
              width: this.depth + "px",
              height: this.height + "px",
              left: (this.width / 2) - (this.depth / 2) + "px"
            });
            break;
          case "top":
          case "bottom":
            css(el, {
              width: this.width + "px",
              height: this.depth + "px",
              top: (this.height / 2) - (this.depth / 2) + "px"
            });
        }
      }
      css(this.faces.front, {
        transform: "rotateY(0) translateZ( " + (this.depth / 2) + "px)"
      });
      css(this.faces.rear, {
        transform: "rotateY(180deg) translateZ( " + (this.depth / 2) + "px )"
      });
      css(this.faces.right, {
        transform: "rotateY( 90deg ) translateZ( " + (this.width / 2) + "px )"
      });
      css(this.faces.left, {
        transform: "rotateY( -90deg ) translateZ( " + (this.width / 2) + "px )"
      });
      css(this.faces.top, {
        transform: "rotateX( 90deg ) translateZ( " + (this.height / 2) + "px )"
      });
      return css(this.faces.bottom, {
        transform: "rotateX( -90deg ) translateZ( " + (this.height / 2) + "px )"
      });
    };

    Box.prototype.setBoxTransform = function() {
      return css(this.box, {
        transform: "translateZ( " + (this.depth / -2) + "px ) rotateX( " + this.rotation.x + "deg ) rotateY( " + this.rotation.y + "deg ) rotateZ( " + this.rotation.z + "deg )"
      });
    };

    Box.prototype.turn = function(r) {
      var axis, deg;
      r || (r = {
        y: 0
      });
      for (axis in r) {
        deg = r[axis];
        console.log(axis);
        if (axis === "x" || axis === "y" || axis === "z") {
          this.rotation[axis] += +deg;
        }
      }
      return this.setBoxTransform();
    };

    Box.prototype.flip = function() {
      return this.turn({
        y: 180
      });
    };

    Box.prototype.showBack = function() {
      var tmp;
      if (!(this.rotation.y % 180 === 0 && this.rotation.y % 360 !== 0)) {
        tmp = closestMultipleTo(this.rotation.y, 360);
        if (!(tmp % 360)) {
          if (tmp > this.rotation.y) {
            tmp = tmp - 180;
          } else {
            tmp = tmp + 180;
          }
        }
        this.rotation.y = tmp;
        return this.turn();
      }
    };

    Box.prototype.showFront = function() {
      if (!(this.rotation.y % 360)) {
        this.rotation.y = closestMultipleTo(this.rotation.y, 360);
        return this.turn();
      }
    };

    Box.prototype.onBack = function() {
      return this.rotation.y % 180 === 0 && this.rotation.y % 360 !== 0;
    };

    Box.prototype.onFront = function() {
      return this.rotation.y % 360 === 0;
    };

    return Box;

  })();

  root = (typeof exports !== "undefined" && exports !== null ? exports : this);

  root.Box = Box;

}).call(this);
